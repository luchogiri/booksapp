// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`El componente Header Generando un snapshot de Header deberia guardarse y mantener consistencia en diferentes configuraciones 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <View
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "#bbbbbb",
        "height": 100,
        "justifyContent": "center",
      }
    }
  >
    <Text
      accessible={true}
      allowFontScaling={true}
      ellipsizeMode="tail"
      style={
        Object {
          "backgroundColor": "transparent",
          "color": "#ffffff",
          "fontSize": 18,
          "lineHeight": 20,
          "textAlign": "center",
        }
      }
    />
  </View>,
  "nodes": Array [
    <View
      style={
        Object {
          "alignItems": "center",
          "backgroundColor": "#bbbbbb",
          "height": 100,
          "justifyContent": "center",
        }
      }
    >
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
        style={
          Object {
            "backgroundColor": "transparent",
            "color": "#ffffff",
            "fontSize": 18,
            "lineHeight": 20,
            "textAlign": "center",
          }
        }
      />
    </View>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 2,
      "_context": Object {},
      "_currentElement": <Header />,
      "_debugID": 3,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": StatelessComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {},
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 2,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <View
          style={
            Object {
              "alignItems": "center",
              "backgroundColor": "#bbbbbb",
              "height": 100,
              "justifyContent": "center",
            }
          }
        >
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
              Object {
                "backgroundColor": "transparent",
                "color": "#ffffff",
                "fontSize": 18,
                "lineHeight": 20,
                "textAlign": "center",
              }
            }
          />
        </View>,
        "_debugID": 4,
        "_renderedOutput": <View
          style={
            Object {
              "alignItems": "center",
              "backgroundColor": "#bbbbbb",
              "height": 100,
              "justifyContent": "center",
            }
          }
        >
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
              Object {
                "backgroundColor": "transparent",
                "color": "#ffffff",
                "fontSize": 18,
                "lineHeight": 20,
                "textAlign": "center",
              }
            }
          />
        </View>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Header />,
}
`;

exports[`El componente Header Generando un snapshot de Header deberia guardarse y mantener consistencia en diferentes configuraciones 2`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <View
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "#bbbbbb",
        "height": 100,
        "justifyContent": "center",
      }
    }
  >
    <Text
      accessible={true}
      allowFontScaling={true}
      ellipsizeMode="tail"
      style={
        Object {
          "backgroundColor": "transparent",
          "color": "#ffffff",
          "fontSize": 18,
          "lineHeight": 20,
          "textAlign": "center",
        }
      }
    >
      titulo
    </Text>
  </View>,
  "nodes": Array [
    <View
      style={
        Object {
          "alignItems": "center",
          "backgroundColor": "#bbbbbb",
          "height": 100,
          "justifyContent": "center",
        }
      }
    >
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
        style={
          Object {
            "backgroundColor": "transparent",
            "color": "#ffffff",
            "fontSize": 18,
            "lineHeight": 20,
            "textAlign": "center",
          }
        }
      >
        titulo
      </Text>
    </View>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 2,
      "_context": Object {},
      "_currentElement": <Header
        title="titulo"
      />,
      "_debugID": 3,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": StatelessComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "title": "titulo",
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 2,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <View
          style={
            Object {
              "alignItems": "center",
              "backgroundColor": "#bbbbbb",
              "height": 100,
              "justifyContent": "center",
            }
          }
        >
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
              Object {
                "backgroundColor": "transparent",
                "color": "#ffffff",
                "fontSize": 18,
                "lineHeight": 20,
                "textAlign": "center",
              }
            }
          >
            titulo
          </Text>
        </View>,
        "_debugID": 4,
        "_renderedOutput": <View
          style={
            Object {
              "alignItems": "center",
              "backgroundColor": "#bbbbbb",
              "height": 100,
              "justifyContent": "center",
            }
          }
        >
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
              Object {
                "backgroundColor": "transparent",
                "color": "#ffffff",
                "fontSize": 18,
                "lineHeight": 20,
                "textAlign": "center",
              }
            }
          >
            titulo
          </Text>
        </View>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Header
    title="titulo"
  />,
}
`;
